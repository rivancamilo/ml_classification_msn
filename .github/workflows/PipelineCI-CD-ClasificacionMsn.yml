# This is a basic workflow to help you get started with Actions

name: Pipeline CI/CD – Modelo Clasificación Tuits

# Controls when the workflow will run
on:
  push:
    branches: [ "main","develop" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Build Docker image
      run: |
        docker build -t clasificacionmsn:${{ github.sha }} .
        docker tag clasificacionmsn:${{ github.sha }} clasificacionmsn:latest
    - name: Test Docker container
      run: |
        # Ejecutar contenedor en background para testing
        docker run -d --name test_container \
          -p 5000:5000 -p 4200:4200 \
          -v /tmp/mlruns:/app/mlruns \
          clasificacionmsn:latest
        
        echo "Contenedor iniciado, esperando a que los servicios estén listos..."
        
        # Función para esperar que un servicio esté listo
        wait_for_service() {
          local url=$1
          local service_name=$2
          local max_attempts=30
          local attempt=1
          
          echo "Esperando a que $service_name esté listo en $url..."
          
          while [ $attempt -le $max_attempts ]; do
            if curl -s --connect-timeout 5 --max-time 10 $url > /dev/null 2>&1; then
              echo "OK ---> $service_name está listo (intento $attempt)"
              return 0
            fi
            echo "Esperando... Intento $attempt/$max_attempts - $service_name no está listo aún"
            sleep 10
            attempt=$((attempt + 1))
          done
          
          echo "Error --> $service_name no respondió después de $max_attempts intentos"
          return 1
        }
        
        # Mostrar logs del contenedor para debug
        echo "Logs del contenedor:"
        docker logs test_container
        
        # Verificar que el contenedor esté corriendo
        if ! docker ps | grep test_container; then
          echo "Error --> El contenedor no está corriendo"
          docker logs test_container
          exit 1
        fi
        
        # Esperar a que MLflow esté listo
        if ! wait_for_service "http://localhost:5000" "MLflow"; then
          echo "Logs finales del contenedor:"
          docker logs test_container
          docker stop test_container
          docker rm test_container
          exit 1
        fi
        
        # Esperar a que Prefect esté listo
        if ! wait_for_service "http://localhost:4200" "Prefect"; then
          echo "Logs finales del contenedor:"
          docker logs test_container
          docker stop test_container
          docker rm test_container
          exit 1
        fi
        
        echo "OK : Todos los servicios están funcionando correctamente"
        # Limpiar
        docker stop test_container
        docker rm test_container
    
    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save clasificacionmsn:latest | gzip > clasificacionmsn.tar.gz
    
    - name: Upload artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: clasificacionmsn.tar.gz
        retention-days: 1
  deploy:
      needs: build-and-test
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'
      
      steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Load Docker image
        run: |
          docker load < clasificacionmsn.tar.gz
      - name: Simulate deployment
        run: |
          echo "Simulación de implementación completada"
          echo "Image: clasificacionmsn:${{ github.sha }}"
          echo "Servicios: MLflow (puerto 5000), Prefect (puerto 4200)"
          echo "Volume: ./mlruns mounted for persistence"
          
